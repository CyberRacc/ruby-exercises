diff --git a/ruby_basics/1_data_types/exercises/numbers_exercises.rb b/ruby_basics/1_data_types/exercises/numbers_exercises.rb
index 608f4a6..04f90c6 100644
--- a/ruby_basics/1_data_types/exercises/numbers_exercises.rb
+++ b/ruby_basics/1_data_types/exercises/numbers_exercises.rb
@@ -5,32 +5,40 @@ end
 
 def subtract(a, b)
   # return the result of subtracting b from a
+  a - b
 end
 
 def multiply(a, b)
   # return the result of multiplying a times b
+  a * b
 end
 
 def divide(a, b)
   # return the result of dividing a by b
+  a / b
 end
 
 def remainder(a, b)
   # return the remainder of dividing a by b using the modulo operator
+  a % b
 end
 
 def float_division(a, b)
   # return the result of dividing a by b as a float, rather than an integer
+  a.to_f / b.to_f
 end
 
 def string_to_number(string)
   # return the result of converting a string into an integer
+  string.to_i
 end
 
 def even?(number)
   # return true if the number is even (hint: use integer's even? method)
+  number.even?
 end
 
 def odd?(number)
   # return true if the number is odd (hint: use integer's odd? method)
+  number.odd?
 end
diff --git a/ruby_basics/1_data_types/exercises/string_exercises.rb b/ruby_basics/1_data_types/exercises/string_exercises.rb
index bd07b7b..6866a30 100644
--- a/ruby_basics/1_data_types/exercises/string_exercises.rb
+++ b/ruby_basics/1_data_types/exercises/string_exercises.rb
@@ -5,36 +5,45 @@ end
 
 def concatenate(string)
   # use concatenation to format the result to be "Hello <string>!"
+  "Hello " + string + "!"
 end
 
 def substrings(word)
   # return the first 4 letters from the word using substrings
+  word[0..3]
 end
 
 def capitalize(word)
   # capitalize the first letter of the word
+  word.capitalize
 end
 
 def uppercase(string)
   # uppercase all letters in the string
+  string.upcase
 end
 
 def downcase(string)
   # downcase all letters in the string
+  string.downcase
 end
 
 def empty_string(string)
   # return true if the string is empty
+  string.empty?
 end
 
 def string_length(string)
   # return the length of the string
+  string.length
 end
 
 def reverse(string)
   # return the same string, with all of its characters reversed
+  string.reverse
 end
 
 def space_remover(string)
   # remove all the spaces in the string using gsub
+  string.gsub(" ", "")
 end
diff --git a/ruby_basics/1_data_types/spec/numbers_exercises_spec.rb b/ruby_basics/1_data_types/spec/numbers_exercises_spec.rb
index a02ebe5..bb4cf30 100644
--- a/ruby_basics/1_data_types/spec/numbers_exercises_spec.rb
+++ b/ruby_basics/1_data_types/spec/numbers_exercises_spec.rb
@@ -23,66 +23,65 @@ RSpec.describe 'Numbers Exercises' do
 
   describe 'multiplication exercise' do
 
-    # remove the 'x' from the line below to unskip the test
-    xit 'multiplies two numbers' do
+    it 'multiplies two numbers' do
       expect(multiply(5, 5)).to eq(25)
     end
   end
 
   describe 'division exercise' do
 
-    xit 'divides two numbers' do
+    it 'divides two numbers' do
       expect(divide(25, 5)).to eq(5)
     end
   end
 
   describe 'modulus exercise' do
 
-    xit 'returns the remainder using modulo' do
+    it 'returns the remainder using modulo' do
       expect(remainder(25, 5)).to eq(0)
     end
 
-    xit 'returns the remainder when it is not 0' do
+    it 'returns the remainder when it is not 0' do
       expect(remainder(13, 5)).to eq(3)
     end
   end
 
   describe 'float exercise' do
 
-    xit 'returns a float' do
+    it 'returns a float' do
       expect(float_division(10, 2)).to eql(5.0)
     end
   end
 
   describe 'string to number exercise' do
 
-    xit 'returns an integer from a string' do
+    it 'returns an integer from a string' do
       expect(string_to_number('1')).to eq(1)
     end
 
-    xit 'returns a negative integer from a string' do
+    it 'returns a negative integer from a string' do
       expect(string_to_number('-5')).to eq(-5)
     end
   end
 
   describe 'even exercise' do
 
-    xit 'returns true when the number is even' do
+    it 'returns true when the number is even' do
       expect(even?(6)).to eq(true)
     end
 
-    xit 'returns false when the number is not even' do
+    it 'returns false when the number is not even' do
       expect(even?(5)).to eq(false)
     end
   end
 
   describe 'odd exercise' do
 
-    xit 'returns true when the number is odd' do
+    it 'returns true when the number is odd' do
        expect(odd?(9)).to eq(true)
     end
 
-    xit 'returns false when the number is not odd' do
+    it 'returns false when the number is not odd' do
        expect(odd?(6)).to eq(false)
     end
 
diff --git a/ruby_basics/1_data_types/spec/strings_exercises_spec.rb b/ruby_basics/1_data_types/spec/strings_exercises_spec.rb
index af448c1..b850112 100644
--- a/ruby_basics/1_data_types/spec/strings_exercises_spec.rb
+++ b/ruby_basics/1_data_types/spec/strings_exercises_spec.rb
@@ -16,40 +16,40 @@ RSpec.describe 'String Exercises' do
       expect(concatenate('world')).to eq('Hello world!')
     end
 
-    xit 'returns "Hello universe!"' do
+    it 'returns "Hello universe!"' do
       expect(concatenate('universe')).to eq('Hello universe!')
     end
   end
 
   describe 'substrings exercise' do
 
-    xit 'returns the first 4 letters of the word' do
+    it 'returns the first 4 letters of the word' do
       expect(substrings('chocolate')).to eq('choc')
     end
   end
 
   describe 'capitalizing exercise' do
 
-    xit 'capitalizes a word' do
+    it 'capitalizes a word' do
       expect(capitalize('paris')).to eq('Paris')
     end
 
-    xit 'only capitalizes the first word if there are multiple words' do
+    it 'only capitalizes the first word if there are multiple words' do
       expect(capitalize('miami in the summer')).to eq('Miami in the summer')
     end
 
-    xit 'leaves an already capitalized word as is' do
+    it 'leaves an already capitalized word as is' do
       expect(capitalize('London')).to eq('London')
     end
   end
 
   describe 'uppercasing exercise' do
 
-    xit 'uppercases a word' do
+    it 'uppercases a word' do
       expect(uppercase('small')).to eq('SMALL')
     end
 
-    xit 'uppercases multiple words' do
+    it 'uppercases multiple words' do
       expect(uppercase('make me bigger')).to eq('MAKE ME BIGGER')
     end
   end
@@ -57,55 +57,55 @@ RSpec.describe 'String Exercises' do
 
   describe 'downcasing exercise' do
 
-    xit 'downcases a word' do
+    it 'downcases a word' do
       expect(downcase('LARGE')).to eq('large')
     end
 
-    xit 'downcases multiple words' do
+    it 'downcases multiple words' do
       expect(downcase('MAKE ME SMALLER')).to eq('make me smaller')
     end
   end
 
   describe 'empty exercise' do
 
-    xit 'returns true if string is empty' do
+    it 'returns true if string is empty' do
       expect(empty_string('')).to eq(true)
     end
 
-    xit 'returns false if string is not empty' do
+    it 'returns false if string is not empty' do
       expect(empty_string('wow')).to eq(false)
     end
   end
 
   describe 'length exercise' do
 
-    xit 'returns the length of a word' do
+    it 'returns the length of a word' do
       expect(string_length('longitude')).to eq(9)
     end
 
-    xit 'returns the length of a string with multiple words' do
+    it 'returns the length of a string with multiple words' do
       expect(string_length('i am quite long')).to eq(15)
     end
   end
 
   describe 'reverse exercise' do
 
-    xit 'reverses a word' do
+    it 'reverses a word' do
       expect(reverse('desrever')).to eq('reversed')
     end
 
-    xit 'reverses multiple words' do
+    it 'reverses multiple words' do
       expect(reverse('dnuora kcab')).to eq('back around')
     end
   end
 
   describe 'remove spaces exercise' do
 
-    xit 'removes a single space' do
+    it 'removes a single space' do
       expect(space_remover('white space')).to eq('whitespace')
     end
 
-    xit 'removes multiple spaces' do
+    it 'removes multiple spaces' do
       expect(space_remover('many white spaces')).to eq('manywhitespaces')
     end
   end
diff --git a/ruby_basics/6_arrays/exercises/array_exercises.rb b/ruby_basics/6_arrays/exercises/array_exercises.rb
index de90df4..1198110 100644
--- a/ruby_basics/6_arrays/exercises/array_exercises.rb
+++ b/ruby_basics/6_arrays/exercises/array_exercises.rb
@@ -1,25 +1,31 @@
 def nil_array(number)
   # return an array containing `nil` the given number of times
+  Array.new(number)
 end
 
 def first_element(array)
   # return the first element of the array
+  array.first
 end
 
 def third_element(array)
   # return the third element of the array
+  array[2]
 end
 
 def last_three_elements(array)
   # return the last 3 elements of the array
+  array.last(3)
 end
 
 def add_element(array)
   # add an element (of any value) to the array
+  array.push(1)
 end
 
 def remove_last_element(array)
   # Step 1: remove the last element from the array
+  array.pop
 
   # Step 2: return the array (because Step 1 returns the value of the element removed)
   array
@@ -27,6 +33,7 @@ end
 
 def remove_first_three_elements(array)
   # Step 1: remove the first three elements
+  array.shift(3)
 
   # Step 2: return the array (because Step 1 returns the values of the elements removed)
   array
@@ -34,28 +41,35 @@ end
 
 def array_concatenation(original, additional)
   # return an array adding the original and additional array together
+  original + additional
 end
 
 def array_difference(original, comparison)
   # return an array of elements from the original array that are not in the comparison array
+  original - comparison
 end
 
 def empty_array?(array)
   # return true if the array is empty
+  array.empty?
 end
 
 def reverse(array)
   # return the reverse of the array
+  array.reverse
 end
 
 def array_length(array)
   # return the length of the array
+  array.length
 end
 
 def include?(array, value)
   # return true if the array includes the value
+  array.include?(value)
 end
 
 def join(array, separator)
   # return the result of joining the array with the separator
+  array.join(separator)
 end
diff --git a/ruby_basics/6_arrays/spec/array_exercises_spec.rb b/ruby_basics/6_arrays/spec/array_exercises_spec.rb
index ed424e9..682a54f 100644
--- a/ruby_basics/6_arrays/spec/array_exercises_spec.rb
+++ b/ruby_basics/6_arrays/spec/array_exercises_spec.rb
@@ -8,53 +8,52 @@ RSpec.describe 'Array Exercises' do
       expect(nil_array(5)).to eq([nil, nil, nil, nil, nil])
     end
 
-    # remove the 'x' from the line below to unskip the test
-    xit 'returns an array containing 2 nil values' do
+    it 'returns an array containing 2 nil values' do
       expect(nil_array(2)).to eq([nil, nil])
     end
   end
 
   describe 'first element exercise' do
 
-    xit 'returns the first element of an array of numbers' do
+    it 'returns the first element of an array of numbers' do
       expect(first_element([2, 4, 6, 8, 10])).to eq(2)
     end
 
-    xit 'returns the first element of an array of strings' do
+    it 'returns the first element of an array of strings' do
       expect(first_element(['foo', 'bar'])).to eq('foo')
     end
   end
 
   describe 'third element exercise' do
 
-    xit 'returns the third element of an array of numbers' do
+    it 'returns the third element of an array of numbers' do
       expect(third_element([2, 4, 6, 8, 10])).to eq(6)
     end
 
-    xit 'returns nil if the array does not have a third element' do
+    it 'returns nil if the array does not have a third element' do
       expect(third_element(['foo', 'bar'])).to eq(nil)
     end
   end
 
   describe 'last three elements exercise' do
 
-    xit 'returns an array of the last three elements' do
+    it 'returns an array of the last three elements' do
       expect(last_three_elements([2, 4, 6, 8, 10])).to eq([6, 8, 10])
     end
 
-    xit 'returns all of the elements when there are less than 3 elements' do
+    it 'returns all of the elements when there are less than 3 elements' do
       expect(last_three_elements(['foo', 'bar'])).to eq(['foo', 'bar'])
     end
   end
 
   describe 'add element exercise' do
 
-    xit 'increases the length of an array by 1' do
+    it 'increases the length of an array by 1' do
       numbers = [1, 2, 3, 4]
       expect { add_element(numbers) }.to change { numbers.length }.by(1)
     end
 
-    xit 'increases the length of an empty array by 1' do
+    it 'increases the length of an empty array by 1' do
       data = []
       expect { add_element(data) }.to change { data.length }.by(1)
     end
@@ -62,99 +61,99 @@ RSpec.describe 'Array Exercises' do
 
   describe 'remove last element exercise' do
 
-    xit 'returns the array without the last element' do
+    it 'returns the array without the last element' do
       expect(remove_last_element([1, 3, 5])).to eq([1, 3])
     end
 
-    xit 'returns an empty array when the array only has one element' do
+    it 'returns an empty array when the array only has one element' do
       expect(remove_last_element(['foo'])).to eq([])
     end
   end
 
   describe 'remove first three elements exercise' do
 
-    xit 'returns the array without the first three elements' do
+    it 'returns the array without the first three elements' do
       expect(remove_first_three_elements([1, 3, 5, 7, 9])).to eq([7, 9])
     end
 
-    xit 'returns an empty array when the array has less than 3 elements' do
+    it 'returns an empty array when the array has less than 3 elements' do
       expect(remove_first_three_elements(['foo', 'bar'])).to eq([])
     end
   end
 
   describe 'array concatenation exercise' do
 
-    xit 'returns an array adding two arrays of numbers together' do
+    it 'returns an array adding two arrays of numbers together' do
       expect(array_concatenation([1, 3, 5], [2, 4, 6])).to eq([1, 3, 5, 2, 4, 6])
     end
 
-    xit 'returns an array adding arrays of strings and numbers together' do
+    it 'returns an array adding arrays of strings and numbers together' do
       expect(array_concatenation(['a', 'b', 'c'], [1, 2, 3])).to eq(['a', 'b', 'c', 1, 2, 3])
     end
   end
 
   describe 'array difference exercise' do
 
-    xit 'returns an array subtracting two arrays of numbers' do
+    it 'returns an array subtracting two arrays of numbers' do
       expect(array_difference([0, 1, 1, 2, 3, 5], [0, 1, 2])).to eq([3, 5])
     end
 
-    xit 'returns an array subtracting two arrays of strings' do
+    it 'returns an array subtracting two arrays of strings' do
       expect(array_difference(['foo', 'bar', 'baz'], ['bar','hello'])).to eq(['foo', 'baz'])
     end
   end
 
   describe 'empty array exercise' do
 
-    xit 'returns true when the array is empty' do
+    it 'returns true when the array is empty' do
       expect(empty_array?([])).to be true
     end
 
-    xit 'returns false when the array is not empty' do
+    it 'returns false when the array is not empty' do
       expect(empty_array?([1, 2, 3])).to be false
     end
   end
 
   describe 'reverse exercise' do
 
-    xit 'returns an array containing the elements in reverse order' do
+    it 'returns an array containing the elements in reverse order' do
       expect(reverse([0, 1, 1, 2, 3, 5])).to eq([5, 3, 2, 1, 1, 0])
     end
 
-    xit 'returns an array containing the element when there is only one' do
+    it 'returns an array containing the element when there is only one' do
       expect(reverse(['foo'])).to eq(['foo'])
     end
   end
 
   describe 'array length exercise' do
 
-    xit 'returns the length of the array' do
+    it 'returns the length of the array' do
       expect(array_length([0, 1, 1, 2, 3, 5])).to eq(6)
     end
 
-    xit 'returns zero when the array is empty' do
+    it 'returns zero when the array is empty' do
       expect(array_length([])).to eq(0)
     end
   end
 
   describe 'include exercise' do
 
-    xit 'returns true when the array contains the specified value' do
+    it 'returns true when the array contains the specified value' do
       expect(include?([0, 1, 1, 2, 3, 5], 3)).to be true
     end
 
-    xit 'returns false when the array does not contain the specified value' do
+    it 'returns false when the array does not contain the specified value' do
       expect(include?([0, 1, 1, 2, 3, 5], 8)).to be false
     end
   end
 
   describe 'join exercise' do
 
-    xit 'returns a string joining an array of numbers with " + "' do
+    it 'returns a string joining an array of numbers with " + "' do
       expect(join([0, 1, 1, 2, 3, 5], ' + ')).to eq('0 + 1 + 1 + 2 + 3 + 5')
     end
 
-    xit 'returns a string joining an array of strings with " "' do
+    it 'returns a string joining an array of strings with " "' do
       expect(join(['foo', 'bar', 'baz'], ' ')).to eq('foo bar baz')
     end
   end
diff --git a/ruby_basics/7_hashes/exercises/hash_exercises.rb b/ruby_basics/7_hashes/exercises/hash_exercises.rb
index 7ae0ab9..7a5ffa5 100644
--- a/ruby_basics/7_hashes/exercises/hash_exercises.rb
+++ b/ruby_basics/7_hashes/exercises/hash_exercises.rb
@@ -2,18 +2,22 @@ def create_favorite_hash(color, number)
   # return a hash with the following key/value pairs:
   # key of color (as a symbol) with value of the color argument
   # key of number (as a symbol) with the value of the number argument
+  favourite_list = {:color => color, :number => number}
 end
 
 def favorite_color(favorite_list)
   # return the value of the color key
+  favorite_list[:color]
 end
 
 def favorite_number(favorite_list)
   # use #fetch to return the value of the number key or 42 if the key is not found
+  favorite_list.fetch[:number, 42]
 end
 
 def update_favorite_movie(favorite_list, movie)
   # Step 1: add/update the key of movie (as a symbol)
+  favorite_list[:movie]
 
   # Step 2: return the hash (because Step 1 returns the value of the movie key)
   favorite_list
@@ -21,6 +25,7 @@ end
 
 def remove_favorite_number(favorite_list)
   # Step 1: delete the number data
+  favorite_list.delete[:number]
 
   # Step 2: return the hash (because Step 1 returns the value of the number key)
   favorite_list
@@ -28,12 +33,15 @@ end
 
 def favorite_categories(favorite_list)
   # return the keys of favorite_list
+  favorite_list.keys
 end
 
 def favorite_items(favorite_list)
   # return the values of favorite_list
+  favorite_list.values
 end
 
 def merge_favorites(original_list, additional_list)
   # merge the two hashes: original_list and additional_list
+  original_list.merge(additional_list)
 end
diff --git a/ruby_basics/7_hashes/spec/hash_exercises_spec.rb b/ruby_basics/7_hashes/spec/hash_exercises_spec.rb
index 203960e..257c108 100644
--- a/ruby_basics/7_hashes/spec/hash_exercises_spec.rb
+++ b/ruby_basics/7_hashes/spec/hash_exercises_spec.rb
@@ -9,9 +9,8 @@ RSpec.describe 'Hash Exercises' do
       result = { color: 'blue', number: 65 }
       expect(favorite).to eq(result)
     end
-    
-    # remove the 'x' from the line below to unskip the test
-    xit 'returns result with an array and hash' do
+
+    it 'returns result with an array and hash' do
       favorite = create_favorite_hash(['orange', 'green'], { lucky: 7 })
       result = { color: ['orange', 'green'], number: { lucky: 7 } }
       expect(favorite).to eq(result)
@@ -20,17 +19,17 @@ RSpec.describe 'Hash Exercises' do
 
   describe 'favorite color exercise' do
 
-    xit 'returns a string' do
+    it 'returns a string' do
       my_favorites = { color: 'blue', number: 65 }
       expect(favorite_color(my_favorites)).to eq('blue')
     end
-    
-    xit 'returns an array' do
+
+    it 'returns an array' do
       my_favorites = { color: ['orange', 'green'], number: { lucky: 7 } }
       expect(favorite_color(my_favorites)).to eq(['orange', 'green'])
     end
 
-    xit 'returns nil when the key is not found' do
+    it 'returns nil when the key is not found' do
       my_favorites = { number: 21, movie: 'Avengers: Endgame' }
       expect(favorite_color(my_favorites)).to eq(nil)
     end
@@ -38,17 +37,17 @@ RSpec.describe 'Hash Exercises' do
 
   describe 'favorite number exercise' do
 
-    xit 'returns an integer' do
+    it 'returns an integer' do
       my_favorites = { color: 'blue', number: 65 }
       expect(favorite_number(my_favorites)).to eq(65)
     end
 
-    xit 'returns a hash' do
+    it 'returns a hash' do
       my_favorites = { color: ['orange', 'green'], number: { lucky: 7 } }
       expect(favorite_number(my_favorites)).to eq({ lucky: 7 })
     end
 
-    xit 'returns the default number when the key is not found' do
+    it 'returns the default number when the key is not found' do
       my_favorites = { color: ['orange', 'green'], movie: 'Avengers: Endgame' }
       expect(favorite_number(my_favorites)).to eq(42)
     end
@@ -56,13 +55,13 @@ RSpec.describe 'Hash Exercises' do
 
   describe 'update favorite movie exercise' do
 
-    xit 'returns hash with a new key/value pair when not included' do
+    it 'returns hash with a new key/value pair when not included' do
       my_favorites = { color: 'blue', number: 65 }
       result = { color: 'blue', number: 65, movie: 'Avengers: Endgame' }
       expect(update_favorite_movie(my_favorites, 'Avengers: Endgame')).to eq(result)
     end
 
-    xit 'returns hash with an updated key/value pair when included' do
+    it 'returns hash with an updated key/value pair when included' do
       my_favorites = { color: 'emerald green', movie: 'Avengers: Endgame' }
       result = { color: 'emerald green', movie: 'Avengers: Infinity War' }
       expect(update_favorite_movie(my_favorites, 'Avengers: Infinity War')).to eq(result)
@@ -71,13 +70,13 @@ RSpec.describe 'Hash Exercises' do
 
   describe 'remove favorite number exercise' do
 
-    xit 'returns hash without key/value pair when included' do
+    it 'returns hash without key/value pair when included' do
       my_favorites = { color: 'blue', number: 65, movie: 'Avengers: Endgame' }
       result = { color: 'blue', movie: 'Avengers: Endgame' }
       expect(remove_favorite_number(my_favorites)).to eq(result)
     end
 
-    xit 'returns hash when key/value pair is not included' do
+    it 'returns hash when key/value pair is not included' do
       my_favorites = { color: 'blue', movie: 'Avengers: Endgame' }
       expect(remove_favorite_number(my_favorites)).to eq(my_favorites)
     end
@@ -85,12 +84,12 @@ RSpec.describe 'Hash Exercises' do
 
   describe 'favorite categories exercise' do
 
-    xit 'returns an array of the keys' do
+    it 'returns an array of the keys' do
       my_favorites = { color: 'blue', number: 65, movie: 'Avengers: Endgame' }
       expect(favorite_categories(my_favorites)).to eq([:color, :number, :movie])
     end
 
-    xit 'returns an empty array when hash is empty' do
+    it 'returns an empty array when hash is empty' do
       my_favorites = {}
       expect(favorite_categories(my_favorites)).to eq([])
     end
@@ -98,17 +97,17 @@ RSpec.describe 'Hash Exercises' do
 
   describe 'favorite items exercise' do
 
-    xit 'returns an array with the string and integer values' do
+    it 'returns an array with the string and integer values' do
       my_favorites = { color: 'blue', number: 65, movie: 'Avengers: Endgame' }
       expect(favorite_items(my_favorites)).to eq(['blue', 65, 'Avengers: Endgame'])
     end
 
-    xit 'returns an array with the array and hash values' do
+    it 'returns an array with the array and hash values' do
       my_favorites = { color: ['orange', 'green'], number: { lucky: 7 } }
       expect(favorite_items(my_favorites)).to eq([['orange', 'green'], { lucky: 7 }])
     end
 
-    xit 'returns an empty array when hash is empty' do
+    it 'returns an empty array when hash is empty' do
       my_favorites = {}
       expect(favorite_items(my_favorites)).to eq([])
     end
@@ -116,21 +115,21 @@ RSpec.describe 'Hash Exercises' do
 
   describe 'merge favorites exercise' do
 
-    xit 'returns a hash with all key/value pairs when there is not a duplicate' do
+    it 'returns a hash with all key/value pairs when there is not a duplicate' do
       my_favorites = { color: 'blue', number: 65 }
       favorite_movie = { movie: 'Avengers: Endgame' }
       result = { color: 'blue', number: 65, movie: 'Avengers: Endgame' }
       expect(merge_favorites(my_favorites, favorite_movie)).to eq(result)
     end
 
-    xit 'returns a hash with an updated value when there is duplicate' do
+    it 'returns a hash with an updated value when there is duplicate' do
       my_favorites = { color: 'emerald green', movie: 'Avengers: Endgame' }
       favorite_movie = { movie: 'Avengers: Infinity War' }
       result = { color: 'emerald green', movie: 'Avengers: Infinity War' }
       expect(merge_favorites(my_favorites, favorite_movie)).to eq(result)
     end
 
-    xit 'returns a hash with all key/value pairs and an updated value when there is duplicate' do
+    it 'returns a hash with all key/value pairs and an updated value when there is duplicate' do
       my_favorites = { color: 'teal', number: 65 }
       new_favorites = { number: 42, movie: "The Hitchhiker's Guide to the Galaxy" }
       result = { color: 'teal', number: 42, movie: "The Hitchhiker's Guide to the Galaxy" }
